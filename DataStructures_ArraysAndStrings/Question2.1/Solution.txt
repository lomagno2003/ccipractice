/*
 * First of all we have to implement the node structure
 */
 
 class Node{
 	private Node * next;
 	
 	private int value;
 	
 	public Node(Node * next, int value){
 		this.setNext(next);
 		this.setValue(value);
 	}
 	
 	public Node * getNext(){
 		return next;
 	}
 	
 	public void setNext(Node * next){
 		this.next = next;
 	}
 	
 	public int getValue(){
 		return this.value;
 	}
 	
 	public void setValue(int value){
 		this.value = value;
 	}
 }
 
 /*
  * Next we have to implement the algorithm. One way to solve this problem
  * is to iterate through each element of the list, and for each element, 
  * iterate through the next elements, and remove the duplicated. I assume that
  * this will have a cost of O(N²) and O(1) in memory space.
  */
  
  void removeDuplicates(Node * root){
  	/* We check that the root is not null */
  	if(root!=null){
	  	for(Node * it1 = root;it1!=null;it1=it1.getNext()){
	  		for(Node * it2 = it1;it2.getNext()!=null;it2=it2.getNext()){
	  			if(it1.getValue() == it2.getNext().getValue()){
	  				removeNextNode(it2);
	  			}
	  		}
	  	}
	  }
  }
  
  void removeNextNode(Node * node){
  	Node * deletedNode = node.getNext();
  	
  	if(deletedNode!=null){
  		node.setNext(node.getNext().getNext());
  		
  		//Free memory
  		delete deletedNode;
  	} else {
  		node.setNext(null);
  	}
  }
  
  /*
   * In this case we don't use any buffer or auxiliary structure, but we got an O(N²)
   * If we use a buffer(for example, suppose that the values are between 0 and 32)
   * we can use a boolean array to mark if a value was read. 
   */
   
   void removeDuplicated2(Node * root){
   		/* We check that the root is not null */
   		if(root!=null){
	   		bool readArray[32];
	   		
	   		for(int i = 0;i<32;i++){
	   			readArray[32]=false;
	   		}
	   		
	   		for(Node * it = root;it.getNext()!=null;it=it.getNext()){
	   			if(!readArray[it.getNext().getValue()]){
	   				/* The element wasn't readed */
	   				readArray[it.getNext().getValue()] = true;
	   			} else {
	   				/* The element was readed before */
	   				removeNextNode(it);
	   			}
	   		}	
	   	}
   }